{
	"member": [
		{
			"kind": "member",
			"type": "Date",
			"name": "Date",
			"memberof": "global.Types",
			"version": "all",
			"platform": "all",
			"description": "定义日期时间类型",
			"example": "返回当前时间毫秒数：<br /><pre>var date: Date = new Date();<br />console.log(date.getTime());</pre>"
		},
		{
			"kind": "member",
			"type": "Function",
			"memberof": "global.Types",
			"name": "Function",
			"version": "all",
			"platform": "all",
			"description": "",
			"example": "函数无任何返回类型：<br /><pre>var f:Function</pre>"
		},
		{
			"kind": "member",
			"type": "Map",
			"name": "Map",
			"memberof": "global.Types",
			"version": "all",
			"platform": "all",
			"description": "定义Map",
			"example": ""
		},
		{
			"kind": "member",
			"type": "T",
			"memberof": "global.Types",
			"name": "T",
			"version": "all",
			"platform": "all",
			"description": "",
			"example": "模板类型：<br /><pre>createT<T>(EventClass:{new (type:string | A, bubbles?:boolean|string, cancelable?:boolean): T})</pre>"
		},
		{
			"kind": "member",
			"type": "any",
			"name": "any",
			"memberof": "global.Types",
			"version": "all",
			"platform": "all",
			"description": "特殊类型或动态类型。如果想要将类型检查推迟到运行时进行，可以使用any。",
			"example": "any定义：<br /><pre>var test:any=1;<br/>text=&quot;str&quot;;<br/>text=true<br/>//定义复杂类型数组<br/>var arr:any[] = [1, true, &quot;str&quot;];</pre>"
		},
		{
			"kind": "member",
			"type": "array",
			"name": "array",
			"memberof": "global.Types",
			"version": "all",
			"platform": "all",
			"description": "定义数组，需给定数组类型。",
			"example": "定义数组的两种方式：<br /><pre>var arr:number[] = [1, 2, 3]; <p>var arr:Array<number> = [1, 2, 3];</p>var array:number[] = [1,2,3];<br />//获取数组长度 (3)<br />console.log(array.length);<br />//字符串形式表现 (1,2,3)<br />console.log(array.toString());<br />//添加对象到数组,返回添加对象(4)<br />console.log(array.push(4));<br />//删除数组最后一个元素,返回删除对象(4)<br />console.log(array.pop());<br />//连接两个数组<br />console.log(array.concat(5,6));<br />//已字符串形式输出数组,可以加入分隔符(1,2,3)<br />console.log(array.join());<br />//反转数组(3,2,1)<br />console.log(array.reverse());<br />//删除数组第一个元素，返回删除对象(3)<br />console.log(array.shift());<br />//截取从索引开始到结束的对象<br />console.log(array.slice(1,2));<br />//数组排序,不传入参数按字符排序，需要根据类型实现排序规则<br />array.sort(function(a: number,b: number): number { return b;});<br />//从数组中添加、删除项目，然后返回被删除的项目,会改变原始数组。参数1要删除起始位置，参数2要删除个数，参数3添加新项目对象<br />array.splice(1);<br />//向数组的开头添加一个或更多元素，并返回新的长度<br />array.unshift(1,2,3);<br />//查找数组中的元素，返回要查找的元素索引，第二个参数可以指定起始位置<br />array.indexOf(2);<br />//从右开始查找数组中的元素<br />array.lastIndexOf(1);<br />//判断数组中元素是否满足传入的条件，只有全部满足返回true<br />array.every;<br />//判断数组中元素是否满足传入的条件，有元素满足返回true<br />array.some;<br />//数组遍历<br />array.forEach;<br />//泛型,按特定规则生成新的数组,还可以参考array.reduce;array.reduceRight<br />var a = [&quot;hello&quot;, &quot;world&quot;];<br />var n = a.map(s => s.length);<br />console.log(n);<br />//返回所有符合条件的元素<br />array.filter;</pre>"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "boolean",
			"memberof": "global.Types",
			"version": "all",
			"platform": "all",
			"description": "定义布尔值类型，取值范围true或false，首字母注意是小写。",
			"example": "定义布尔值类型：<br /><pre>var isDone: boolean = false;</pre>"
		},
		{
			"kind": "member",
			"type": "enum",
			"name": "enum",
			"memberof": "global.Types",
			"version": "all",
			"platform": "all",
			"description": "枚举、集合数据类型，枚举是一组数值类型更加友好的名称。",
			"example": "枚举定义与使用：<br /><pre>enum Color {Red, Green, Blue};<p>var c: Color = Color.Green;</p></pre>"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "number",
			"memberof": "global.Types",
			"version": "all",
			"platform": "all",
			"description": "定义数值类型，TypeScript所有的数值类型采用浮点型计数。",
			"example": "定义数值类型：<br /><pre>var hp: number = 100;</pre>"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "string",
			"memberof": "global.Types",
			"version": "all",
			"platform": "all",
			"description": "定义字符串类型，与其他语言一样使用单引号或双引号表示。",
			"example": "定义字符串类型：<pre>var name: string = &quot;game&quot;;<br />//获取字符串长度<br />console.log(name.length); <br />//返回指定位置的字符编码<br />console.log(name.charAt(1)); <br />//返回指定位置的字符 <br />name.charCodeAt(1); <br />//字符串连接 <br />name.concat(&quot;yx&quot;,&quot;API&quot;); <br />//查找字符，找到返回索引，找不到返回-1 <br />name.indexOf(&quot;na&quot;); <br />//查找字符（从右开始），找到返回索引，找不到返回-1 <br />name.lastIndexOf(&quot;na&quot;); <br />//用本地特定的顺序来比较两个字符串 <br />name.localeCompare(&quot;name&quot;); <br />//使用正则表达式模式对字符串执行查找，并将包含查找的结果作为数组返回 <br />name.match('m'); <br />//替换匹配的字符串（可以是正则表达式） <br />name.replace('m','nn'); <br />//返回与正则表达式查找内容匹配的第一个子字符串的位置 <br />name.search(''); <br />//提取字符串片段，并在新的字符串中返回被提取的部分 <br />name.slice(0,2); <br />//按特定格式把字符串分割为数组 <br />name.split('_'); <br />//字符串截取(索引之间的字符串) <br />name.substring(0,1); <br />//字符串截取(索引开始到结束) <br />name.substr(0,1); <br />//删除字符串中的空格 <br />name.trim(); <br />//把字符串转换为小写 <br />name.toLowerCase(); //按照本地方式转换为字符串小写 <br />name.toLocaleLowerCase(); <br />//把字符串转换为大写 <br />name.toUpperCase(); <br />//按照本地方式转换为字符串大写 <br />name.toLocaleUpperCase();</pre>"
		},
		{
			"kind": "member",
			"type": "",
			"memberof": "global.Types",
			"name": "void",
			"version": "all",
			"platform": "all",
			"description": "指定函数无法返回任何值。",
			"example": "函数无任何返回类型：<br /><pre>function test():void{ }</pre>"
		}
	],
	"function": [],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "Types",
		"memberof": "global",
		"version": "all",
		"platform": "all",
		"description": "基础类型介绍"
	}
}